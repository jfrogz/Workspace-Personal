/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.vw.swf.security.controller;

import io.datafx.controller.ViewController;
import io.datafx.controller.flow.FlowException;
import io.datafx.controller.flow.context.ActionHandler;
import io.datafx.controller.flow.context.FXMLViewFlowContext;
import io.datafx.controller.flow.context.FlowActionHandler;
import io.datafx.controller.flow.context.ViewFlowContext;
import io.datafx.controller.util.VetoException;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.HBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.util.Callback;
import javax.annotation.PostConstruct;
import mx.vw.swf.security.model.SegUsuario;
import mx.vw.swf.security.dao.SegUsuarioDAO;
import javafx.scene.control.Pagination;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.stage.StageStyle;
import static mx.vw.swf.cdi.DataFXLauncher.getProperty;
import static mx.vw.swf.cdi.DataFXLauncher.getSecurityProperty;
import mx.vw.swf.fwk.JasperUtil;
import mx.vw.swf.fwk.TestJasperUtil;
import mx.vw.swf.security.service.CrearEditarUsuariosService;
import mx.vw.swf.sms.utilerias.Pantallas;
import mx.vw.swf.sms.utilerias.Utilerias;
import org.controlsfx.control.action.Action;
import org.controlsfx.dialog.Dialog;

/**
 * FXML Controller class
 *
 * @author fox1x0d
 */
@ViewController("/fxml/security/AdministrarUsuarios.fxml")
public class AdministrarUsuariosController extends MenuController {

   @FXML
   private TableView<SegUsuario> tablaUsuarios;
   @FXML
   private TableColumn<SegUsuario, String> colUsuario, colNombre, colCorreoElectronico, colEstatus;
   @FXML
   private TableColumn<SegUsuario, Long> colId;
   @FXML
   private TableColumn<SegUsuario, SegUsuario> colAcciones;
   @FXML
   private BorderPane borderUsuarios;
   @FXML
   private TextField flUsuario, flNombre;
   @FXML
   private Button btnNuevoUsuario;
   @FXML
   private Label lbEtiquetaUsuario, lbEtiquetaNombre, lbPaginacion;
   @FXML
   private GridPane gridBotones;
   @FXMLViewFlowContext
   ViewFlowContext viewFlowContext;
   @ActionHandler
   private FlowActionHandler actionHandlerPerfil;
   @FXML
   private ComboBox comboPaginacion;
   private ObservableList<SegUsuario> listaUsuarios;
   private FilteredList<SegUsuario> filteredData;
   private SortedList<SegUsuario> sortedData;
   private Pagination pagination;
   private int renglonesMostrar = 5;

   @PostConstruct
   public void postConstruct() {
      super.postConstruct();
      super.setEncabezado(getSecurityProperty("AdmininstraUsuario.Header"));
      inicializaControles();
      inicializaColumnasTabla();
      inicializaPatalla();
      inicializaEventos();
      inicializaReportFrame();
   }

   private void inicializaReportFrame() {
      reportTitle = getSecurityProperty("AdministraUsuario.ReportTitle");
      reportName = getSecurityProperty("AdministraUsuario.ReportName");
      reportFileName = reportName.replace('.', '_');
      reportData = sortedData;
   }

   public void inicializaControles() {
      comboPaginacion.setItems(Utilerias.comboPaginacion());
      comboPaginacion.getSelectionModel().select(0);
      lbPaginacion.setText(getProperty("General.Paginacion.lbRegistros"));
      btnNuevoUsuario.setText(getProperty("General.btnNuevo"));
      lbEtiquetaUsuario.setText(getProperty("Login.UsrLabel") + ":");
      lbEtiquetaNombre.setText(getSecurityProperty("AdmininstraUsuario.lbNombre") + ":");
   }

   public void inicializaColumnasTabla() {

      String nombresHeader[] = {getProperty("General.lbID"),
         getProperty("Login.UsrLabel"),
         getSecurityProperty("AdmininstraUsuario.lbNombre"),
         getSecurityProperty("AdmininstraUsuario.lbCorreo"),
         getProperty("General.lbEstatus"),
         getProperty("General.lbAcciones")};
      String valoresHeader[] = {"id", "userId", "nombreCompleto", "correoE", "etiquetaEstatus"};
      Utilerias.headerValuesColumnTableView(nombresHeader, valoresHeader, tablaUsuarios, false);
      inicializaColumnasControles();

   }

   public void inicializaColumnasControles() {
      colAcciones.setSortable(false);
      colAcciones.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<SegUsuario, SegUsuario>, ObservableValue<SegUsuario>>() {
         public ObservableValue<SegUsuario> call(TableColumn.CellDataFeatures<SegUsuario, SegUsuario> p) {
            return new ReadOnlyObjectWrapper(p.getValue());
         }
      });

      colAcciones.setCellFactory(new Callback<TableColumn<SegUsuario, SegUsuario>, TableCell<SegUsuario, SegUsuario>>() {
         @Override
         public TableCell<SegUsuario, SegUsuario> call(TableColumn<SegUsuario, SegUsuario> param) {
            TableCell<SegUsuario, SegUsuario> cell = new TableCell<SegUsuario, SegUsuario>() {

               FlowActionHandler actionHandler = actionHandlerPerfil;
               Button editar = new Button(getProperty("General.btnEditar"));
               Button perfiles = new Button(getSecurityProperty("AdmininstraUsuario.btnAsignarPerfiles"));
               Button desactivar = new Button();

               Short desactiva = 0;

               @Override
               public void updateItem(SegUsuario item, boolean empty) {
                  if (null != item) {
                     editar.getStyleClass().add("botones");
                     editar.getStyleClass().add("buttonEdit");
                     editar.applyCss();
                     perfiles.getStyleClass().add("botones");
                     perfiles.getStyleClass().add("buttonAdd");
                     perfiles.applyCss();
                     desactivar.setPrefWidth(100);
                     desactivar.setAlignment(Pos.BASELINE_LEFT);
                     HBox botones = new HBox(editar, desactivar, perfiles);
                     botones.setSpacing(10);
                     setGraphic(botones);

                     if (item.getEstatus() == 0) {
                        desactivar.setText(getProperty("General.btnActivar"));
                        desactivar.getStyleClass().clear();
                        desactivar.getStyleClass().add("botones");
                        desactivar.getStyleClass().add("buttonAccept");
                        desactivar.applyCss();
                        desactiva = 1;
                     } else {
                        desactivar.setText(getProperty("General.btnDesactivar"));
                        desactivar.getStyleClass().clear();
                        desactivar.getStyleClass().add("botones");
                        desactivar.getStyleClass().add("buttonInactiva");
                        desactivar.applyCss();
                        desactiva = 0;
                     }

                     editar.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent t) {
                           creaEditaUsuario(item, t);
                        }
                     });
                     desactivar.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent t) {
                           Action response = Utilerias.dialogConfirm(getSecurityProperty("AdmininstraUsuario.Valid.Estatus.Header"),
                                   getSecurityProperty("AdmininstraUsuario.Valid.Estatus.Message"));
                           if (response == Dialog.ACTION_YES) {
                              item.setEstatus(desactiva);
                              desactivarUsuario(item);
                           }

                        }
                     });
                     perfiles.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent t) {
                           try {

                              HashMap<Object, Object> mapa = (HashMap<Object, Object>) viewFlowContext.getRegisteredObject("AppMap");
                              mapa.put("USUARIOPERFIL", item);
                              viewFlowContext.register("AppMap", mapa);
                              actionHandler.navigate(AdministrarPerfilesController.class);
                           } catch (VetoException | FlowException e) {

                           }
                        }
                     });
                  } else {
                     setGraphic(null);
                  }
               }
            };
            return cell;
         }
      });

   }

   public void inicializaPatalla() {
      setListaUsuarios(FXCollections.observableArrayList(obtieneListaUsuarios()));
      filteredData = new FilteredList<>(getListaUsuarios(), p -> true);
      sortedData = (SortedList<SegUsuario>) Utilerias.creaFiltro(filteredData, tablaUsuarios);
      inicializaTablaUsuario(sortedData);
      reportData = sortedData;
   }

   public ObservableList<SegUsuario> obtieneListaUsuarios() {
      List<SegUsuario> lista = new SegUsuarioDAO().findAll();
      ObservableList<SegUsuario> listaol = FXCollections.observableArrayList();
      for (SegUsuario item : lista) {
         listaol.add(item);
      }
      return listaol;
   }

   public void inicializaTablaUsuario(SortedList<SegUsuario> lista) {
      renglonesMostrar = Integer.parseInt(comboPaginacion.getValue().toString());
      borderUsuarios.setCenter(null);
      if (!lista.isEmpty()) {
         pagination = Utilerias.creaPaginacionTableView(renglonesMostrar, lista, tablaUsuarios, gridBotones);
         borderUsuarios.setCenter(pagination);
      } else {
         tablaUsuarios.getItems().clear();
         borderUsuarios.setCenter(tablaUsuarios);

      }
   }

   public void inicializaEventos() {
      btnNuevoUsuario.setOnAction((event) -> nuevoUsuario(event));

      comboPaginacion.setOnAction((event) -> {
         renglonesMostrar = Integer.parseInt(comboPaginacion.getValue().toString());
         inicializaTablaUsuario(sortedData);
      });

      flUsuario.textProperty().addListener((observable, oldValue, newValue) -> {
         filteredData.setPredicate(usuer -> {
            if (newValue == null || newValue.isEmpty()) {
               return true;
            }
            String lowerCaseFilter = newValue.toLowerCase();

            if (usuer.getUserId().toLowerCase().startsWith(lowerCaseFilter)) {
               return true;
            }
            return false;
         });
         inicializaTablaUsuario(sortedData);
      });
      flNombre.textProperty().addListener((observable, oldValue, newValue) -> {
         filteredData.setPredicate(usuer -> {
            if (newValue == null || newValue.isEmpty()) {
               return true;
            }
            String lowerCaseFilter = newValue.toLowerCase();

            if (usuer.getNombreCompleto().toLowerCase().startsWith(lowerCaseFilter)) {
               return true;
            }
            return false;
         });
         inicializaTablaUsuario(sortedData);
      });
      reportData = sortedData;
   }

   public void nuevoUsuario(ActionEvent event) {
      creaEditaUsuario(null, event);
   }

   public void desactivarUsuario(SegUsuario usuario) {
      boolean muestraMensaje = new CrearEditarUsuariosService().actualizaUsuario(usuario);
      if (muestraMensaje) {

         Utilerias.dialogOk(getSecurityProperty("AdmininstraUsuario.Valid.DesactivaUser.Header"),
                 getSecurityProperty("AdmininstraUsuario.Valid.DesactivaUser.Message"));
      } else {
         inicializaPatalla();
      }

   }

   public void creaEditaUsuario(SegUsuario usuario, ActionEvent ev) {
      String titulo = null != usuario ? getSecurityProperty("CreaEditaUsuario.Header.Nuevo") : getSecurityProperty("CreaEditaUsuario.Header.Editar");
      Stage stage;

      try {
         CrearEditarUsuariosController controller = new CrearEditarUsuariosController(usuario, this);
         stage = Utilerias.nuevaVentana(Pantallas.FXML_CREAR_EDITAR_USUARIOS, controller, titulo);
         stage.initModality(Modality.WINDOW_MODAL);
         stage.initStyle(StageStyle.UTILITY);
         stage.setResizable(false);
         stage.initOwner(((Node) ev.getSource()).getScene().getWindow());
         stage.showAndWait();
      } catch (IOException ex) {
         Logger.getLogger(AdministrarUsuariosController.class.getName()).log(Level.SEVERE, null, ex);
      }

   }

   public void setListaUsuarios(ObservableList<SegUsuario> listaUsuarios) {
      this.listaUsuarios = listaUsuarios;
   }

   public ObservableList<SegUsuario> getListaUsuarios() {
      return listaUsuarios;
   }

}
