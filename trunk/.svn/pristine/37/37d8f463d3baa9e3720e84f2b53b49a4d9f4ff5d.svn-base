package mx.vw.swf.sms.controller;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import io.datafx.controller.ViewController;
import io.datafx.controller.flow.FlowException;
import io.datafx.controller.flow.context.ActionHandler;
import io.datafx.controller.flow.context.FXMLViewFlowContext;
import io.datafx.controller.flow.context.FlowActionHandler;
import io.datafx.controller.flow.context.ViewFlowContext;
import io.datafx.controller.util.VetoException;
import java.io.IOException;
import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.Pagination;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.util.Callback;
import javax.annotation.PostConstruct;
import mx.vw.swf.cdi.DataFXLauncher;
import mx.vw.swf.security.controller.AdministrarPerfilesController;
import mx.vw.swf.security.controller.AdministrarUsuariosController;
import mx.vw.swf.security.controller.CrearEditarUsuariosController;
import mx.vw.swf.security.controller.MenuController;
import mx.vw.swf.security.dao.SegUsuarioDAO;
import mx.vw.swf.security.model.SegUsuario;
import mx.vw.swf.security.service.CrearEditarUsuariosService;
import mx.vw.swf.sms.dao.SmsCteProvDAO;
import mx.vw.swf.sms.model.SmsCteProv;
import mx.vw.swf.sms.utilerias.Pantallas;
import mx.vw.swf.sms.utilerias.Utilerias;

/**
 * FXML Controller class
 *
 * @author fox1yij
 */
@ViewController("/fxml/catalogos/RegistroDeClientesYProveedores.fxml")
public class RegistroDeClientesYProveedoresController extends MenuController {

    @FXML
    private TableView<SmsCteProv> tablaClientesProveedores;
    @FXML
    private Button btnNuevoClienteProveedor;
    @FXML
    private Label lblClave, lblEmpresa;

    @FXML
    private TableColumn<SmsCteProv, String> colClave, colNombreEmpresa, colRazonSocial, colIdSAP;
    @FXML
    private TableColumn<SmsCteProv, Long> colId;
    @FXML
    private TableColumn<SmsCteProv, Short> colCliePro, colEstatus, colContingencia;
    @FXML
    private TableColumn<SmsCteProv, SmsCteProv> colAcciones;
    @FXML
    private BorderPane borderUsuarios;
    @FXML
    private TextField flUsuario, flNombre;
    @FXMLViewFlowContext
    ViewFlowContext viewFlowContext;

    private ObservableList<SmsCteProv> listaClientesProveedores;
    private Pagination pagination;
    private FilteredList<SmsCteProv> filteredData;
    private SortedList<SmsCteProv> sortedData;
    @ActionHandler
    private FlowActionHandler actionHandlerPerfil;
    private ComboBox comboPaginacion;
    private int renglonesMostrar = 5;

    @PostConstruct
    public void postConstruct() {
        super.postConstruct();
        inicializaControles();
        inicializaColumnasTabla();
        inicializaUsuarios();
        
        /*
         inicializaColumnaAccion();
         inicializaUsuarios();
         inicializaAccionesFiltros();
         */

    }

    public void inicializaControles() {
        //comboPaginacion = Utilerias.comboPaginacion();
        comboPaginacion.setValue(5);
        btnNuevoClienteProveedor.setText(DataFXLauncher.mensajesProperties.getProperty("btnNuevo"));
        lblClave.setText(DataFXLauncher.mensajesProperties.getProperty("lblClave") + ":");
        lblEmpresa.setText(DataFXLauncher.mensajesProperties.getProperty("lblNombreEmpresa") + ":");

        //Aun No modificado
        /*
         comboPaginacion.setOnAction((event) -> {
         renglonesMostrar = (int) comboPaginacion.getSelectionModel().getSelectedItem();
         inicializaUsuarios();
         });
         */
    }

    public void inicializaColumnasTabla() {

        colId.setText(DataFXLauncher.mensajesProperties.getProperty("colId"));
        colCliePro.setText(DataFXLauncher.mensajesProperties.getProperty("colEsProveedor"));
        // colClave.setText(DataFXLauncher.mensajesProperties.getProperty("colClave"));
        //colNombreEmpresa.setText(DataFXLauncher.mensajesProperties.getProperty("colNombreEmpresa"));
        colRazonSocial.setText(DataFXLauncher.mensajesProperties.getProperty("colRazonSocial"));
        colIdSAP.setText(DataFXLauncher.mensajesProperties.getProperty("colIdSAP"));
        colEstatus.setText(DataFXLauncher.mensajesProperties.getProperty("colStatus"));
        colContingencia.setText(DataFXLauncher.mensajesProperties.getProperty("colSalidaContingencia"));
        colAcciones.setText(DataFXLauncher.mensajesProperties.getProperty("colAcciones"));

        colClave.setGraphic(Utilerias.creaFiltro(DataFXLauncher.mensajesProperties.getProperty("colClave")));
        colNombreEmpresa.setGraphic(Utilerias.creaFiltro(DataFXLauncher.mensajesProperties.getProperty("colNombreEmpresa")));

        colId.setCellValueFactory(new PropertyValueFactory<>("id"));
        colClave.setCellValueFactory(new PropertyValueFactory<>("clave"));
        colNombreEmpresa.setCellValueFactory(new PropertyValueFactory<>("nombre"));
        colCliePro.setCellValueFactory(new PropertyValueFactory<>("esProveedor"));
        colRazonSocial.setCellValueFactory(new PropertyValueFactory<>("razonSocial"));
        colIdSAP.setCellValueFactory(new PropertyValueFactory<>("idSap"));
        colEstatus.setCellValueFactory(new PropertyValueFactory<>("estatus"));
        colContingencia.setCellValueFactory(new PropertyValueFactory<>("salidaContingencia"));

    }

    public void inicializaColumnaAccion() {
        colAcciones.setSortable(false);
        colAcciones.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<SmsCteProv, SmsCteProv>, ObservableValue<SmsCteProv>>() {
            public ObservableValue<SmsCteProv> call(TableColumn.CellDataFeatures<SmsCteProv, SmsCteProv> p) {
                return new ReadOnlyObjectWrapper(p.getValue());
            }
        });

        colAcciones.setCellFactory(new Callback<TableColumn<SmsCteProv, SmsCteProv>, TableCell<SmsCteProv, SmsCteProv>>() {
            @Override
            public TableCell<SmsCteProv, SmsCteProv> call(TableColumn<SmsCteProv, SmsCteProv> param) {
                TableCell<SmsCteProv, SmsCteProv> cell = new TableCell<SmsCteProv, SmsCteProv>() {

                    FlowActionHandler actionHandler = actionHandlerPerfil;
                    Button editar = new Button(DataFXLauncher.mensajesPropertiesSeg.getProperty("botonEditar"));
                    Button perfiles = new Button(DataFXLauncher.mensajesPropertiesSeg.getProperty("botonAsignarPerfiles"));
                    Button desactivar = new Button();
                    Short desactiva = 0;

                    public void updateItem(SmsCteProv item, boolean empty) {
                        if (item != null) {
                            HBox botones = new HBox(editar, desactivar, perfiles);
                            botones.setSpacing(10);
                            setGraphic(botones);

                            if (item.getEstatus() == 0) {
                                desactivar.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("botonActivar"));
                                desactiva = 1;
                            } else {
                                desactivar.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("botonDesactivar"));
                                desactiva = 0;
                            }

                            editar.setOnAction(new EventHandler<ActionEvent>() {
                                @Override
                                public void handle(ActionEvent t) {
                                    // creaEditaUsuario(item, t);
                                }
                            });
                            desactivar.setOnAction(new EventHandler<ActionEvent>() {
                                @Override
                                public void handle(ActionEvent t) {
                                    item.setEstatus(desactiva);
                                    desactivarUsuario(item);
                                    inicializaUsuarios();
                                }
                            });/*
                             perfiles.setOnAction(new EventHandler<ActionEvent>() {
                             @Override
                             public void handle(ActionEvent t) {
                             try { 
                             AdministrarPerfilesController.segUsuario=item;
                             actionHandler.navigate(AdministrarPerfilesController.class);
                             } catch (VetoException | FlowException e) {
                             e.printStackTrace();
                             }
                             }
                             });*/

                        } else {
                            setGraphic(null);
                        }
                    }
                };
                return cell;
            }
        });

    }

    public void inicializaUsuarios() {
        setListaClientesProveedores(FXCollections.observableArrayList(obtieneListaClientesProveedores()));
        filteredData = new FilteredList<>(getListaClientesProveedores(), p -> true);
        sortedData = new SortedList<>(filteredData);
        sortedData.comparatorProperty().bind(tablaClientesProveedores.comparatorProperty());
        inicializaTablaClientesProveedores(sortedData);

    }

    public void inicializaTablaClientesProveedores(SortedList<SmsCteProv> lista) {
        renglonesMostrar = Integer.parseInt(comboPaginacion.getValue().toString());
        borderUsuarios.setCenter(null);
        if (lista.size() > 0) {
            //pagination = Utilerias.creaPaginacionTableView(renglonesMostrar, lista, tablaClientesProveedores, comboPaginacion);
            borderUsuarios.setCenter(pagination);
        } else {
            tablaClientesProveedores.getItems().clear();
            borderUsuarios.setCenter(tablaClientesProveedores);

        }
    }

    public ObservableList<SmsCteProv> obtieneListaClientesProveedores() {
        List<SmsCteProv> lista = new SmsCteProvDAO().findAll();
        ObservableList<SmsCteProv> listaol = FXCollections.observableArrayList();
        for (SmsCteProv item : lista) {
            listaol.add(item);
        }
        return listaol;
    }

    public void inicializaAccionesFiltros() {
        flUsuario.textProperty().addListener((observable, oldValue, newValue) -> {
            filteredData.setPredicate(clieProv -> {

                if (newValue == null || newValue.isEmpty()) {
                    return true;
                }
                String lowerCaseFilter = newValue.toLowerCase();

                if (clieProv.getClave().toLowerCase().indexOf(lowerCaseFilter) != -1) {
                    return true;
                }
                return false;
            });
            inicializaTablaClientesProveedores(sortedData);
        });
        flNombre.textProperty().addListener((observable, oldValue, newValue) -> {
            filteredData.setPredicate(usuer -> {
                if (newValue == null || newValue.isEmpty()) {
                    return true;
                }
                String lowerCaseFilter = newValue.toLowerCase();

                if (usuer.getNombre().toLowerCase().indexOf(lowerCaseFilter) != -1) {
                    return true;
                }
                return false;
            });
            inicializaTablaClientesProveedores(sortedData);
        });
    }

    public void desactivarUsuario(SmsCteProv cteProv) {
        //new CrearEditarUsuariosService().actualizaUsuario(usuario);
    }

    public void nuevoClienteProveedor(ActionEvent event) throws FlowException {
        //creaEditaUsuario(null, event);
    }

    //******************************
    public void setListaClientesProveedores(ObservableList<SmsCteProv> listaClPr) {
        this.listaClientesProveedores = listaClPr;
    }

    public ObservableList<SmsCteProv> getListaClientesProveedores() {
        return listaClientesProveedores;
    }

    public void creaEditaClienteProveedor(ActionEvent ev) {
        Stage stage;
        try {
            //CrearEditarClienteProveedorController controller = new CrearEditarClienteProveedorController((SegUsuario) viewFlowContext.getRegisteredObject("USERPRINCIPAL"));
            //Codigo para pruebas eliminar la sig. linea y habilitar la anterior
             //Pruebas de aqui
            
            SegUsuarioDAO aO = new SegUsuarioDAO();
            SegUsuario segUsuario = aO.findAll(0,1).get(0);            
            CrearEditarClienteProveedorController controller = new CrearEditarClienteProveedorController(segUsuario);
            //hasta aqui
            
            stage = Utilerias.nuevaVentana(Pantallas.FXML_CREAR_EDITAR_CLIENTES_PROVEEDORES, controller, "Nuevo Cliente / Proveedor");
            stage.initModality(Modality.WINDOW_MODAL);
            stage.initStyle(StageStyle.UTILITY);
            stage.setResizable(false);
            stage.initOwner(((Node) ev.getSource()).getScene().getWindow());
            stage.showAndWait();
        } catch (IOException ex) {
            Logger.getLogger(AdministrarUsuariosController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Que pedo con esto cambiarlo luego***************/*
  /*  
     public void administraPerfiles(SegUsuario usuario, ActionEvent ev)
     {
        
     }
     */
}
