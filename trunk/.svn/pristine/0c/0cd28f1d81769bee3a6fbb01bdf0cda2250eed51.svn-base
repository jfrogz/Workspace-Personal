/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.vw.swf.security.controller;

import io.datafx.controller.ViewController;
import io.datafx.controller.flow.FlowException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.util.Callback;
import javax.annotation.PostConstruct;
import mx.vw.swf.security.model.SegUsuario;
import mx.vw.swf.security.dao.SegUsuarioDAO;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Pagination;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.stage.StageStyle;
import mx.vw.swf.security.service.CrearEditarUsuariosService;
import mx.vw.swf.sms.utilerias.Pantallas;
import mx.vw.swf.sms.utilerias.Utilerias;




/**
 * FXML Controller class
 *
 * @author fox1x0d
 */
@ViewController("/fxml/security/AdministrarUsuarios.fxml")
public class AdministrarUsuariosController extends MenuController{
   
    @FXML   private TableView<SegUsuario>      tablaUsuarios;  
    @FXML   private TableColumn<SegUsuario,String>  colUsuario,colNombre,colCorreoElectronico, colEstatus;
    @FXML   private TableColumn<SegUsuario,Long> colId; 
    @FXML   private TableColumn<SegUsuario,Boolean> colAcciones; 
    @FXML   private BorderPane anchorUsuarios;
    @FXML   private TextField flUsuario,flNombre;

            private ObservableList<SegUsuario> listaUsuarios = FXCollections.observableArrayList();    
            private Pagination pagination;
            private int tamListaUsuarios=0;
 

  
    @PostConstruct
    public void postConstruct() {        
        super.postConstruct();      
        inicializaColumnasTabla();
        listaUsuarios=obtieneListaUsuarios();        
        tamListaUsuarios =  listaUsuarios.size();        
        if(tamListaUsuarios > 0){
        inicializaTablaUsuario(listaUsuarios, tamListaUsuarios);
        inicializacolumnaAccion();
        }
        inicializaAccionesFiltros();
        
       
              
      
     }
    public void inicializaTablaUsuario(ObservableList<SegUsuario> lista, int tamListaUsuarios){
        
        int renglonesMostrar=5;
        int tablasPorPagina=1;
        pagination = Utilerias.creaPaginacionTableView(tamListaUsuarios, tablasPorPagina, renglonesMostrar, lista, tablaUsuarios); 
        anchorUsuarios.setCenter(null);
        anchorUsuarios.setCenter(pagination);
    }
    public void inicializaColumnasTabla(){
        
         colId.setText("ID");         
         colCorreoElectronico.setText("Correo Electr√≥nico");
         colEstatus.setText("Estatus");
         colAcciones.setText("Acciones");
         colUsuario.setText("Usuario");        
         colNombre.setText("Nombre");
         
         colId.setCellValueFactory(new PropertyValueFactory<>("id"));
         colUsuario.setCellValueFactory(new PropertyValueFactory<>("userId"));
         colNombre.setCellValueFactory(new PropertyValueFactory<>("nombreCompleto"));
         colCorreoElectronico.setCellValueFactory(new PropertyValueFactory<>("correoE"));
         colEstatus.setCellValueFactory(new PropertyValueFactory<>("etiquetaEstatus"));        
        
        
         
         
         
    }
    public ObservableList<SegUsuario> obtieneListaUsuarios(){
            List<SegUsuario> lista = new SegUsuarioDAO().findAll();
            ObservableList<SegUsuario> listaol = FXCollections.observableArrayList();
            for(SegUsuario item:lista){
                listaol.add(item);
            }
            return listaol;
    }
   
   public void inicializacolumnaAccion(){       
         colAcciones.setSortable(false);
         colAcciones.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<SegUsuario, Boolean>, ObservableValue<Boolean>>(){                   
                    public ObservableValue<Boolean> call(TableColumn.CellDataFeatures<SegUsuario, Boolean> p) {                                                                                             
                       return new SimpleBooleanProperty(p.getValue() != null);                       
                    }                   
         });
        
        colAcciones.setCellFactory(new Callback<TableColumn<SegUsuario,Boolean>,TableCell<SegUsuario,Boolean>>(){        
                @Override
                public TableCell<SegUsuario,Boolean> call(TableColumn<SegUsuario,Boolean> param) {                
                        TableCell<SegUsuario,Boolean> cell = new TableCell<SegUsuario,Boolean>(){
                               @Override
                                public void updateItem(Boolean item, boolean empty) {
                                        if(item!=null){

                                           Button editar = new Button("Editar"); 
                                           Button desactivar = new Button("Desactivar"); 
                                           Button perfiles = new Button("Perfiles");
                                           editar.setStyle("botones");
                                           HBox botones= new HBox(editar,desactivar,perfiles);
                                           botones.setSpacing(10);
                                           setGraphic(botones);
                                           editar.setOnAction(new EventHandler<ActionEvent>() {
                                                @Override
                                                public void handle(ActionEvent t) {
                                                    int selectdIndex = getTableRow().getIndex();
                                                    SegUsuario usuario=(SegUsuario) tablaUsuarios.getItems().get(selectdIndex);
                                                   
                                                    try {
                                                        creaEditaUsuario(usuario,t);
                                                    } catch (FlowException ex) {
                                                        Logger.getLogger(AdministrarUsuariosController.class.getName()).log(Level.SEVERE, null, ex);
                                                    }
                                                    
                                                }
                                           });
                                           desactivar.setOnAction(new EventHandler<ActionEvent>() {
                                                @Override
                                                public void handle(ActionEvent t) {
                                                    int selectdIndex = getTableRow().getIndex();
                                                    Short desactiva=0;
                                                    SegUsuario usuario=(SegUsuario) tablaUsuarios.getItems().get(selectdIndex);
                                                    usuario.setEstatus(desactiva);
                                                    desactivarUsuario(usuario);
                                                    listaUsuarios = obtieneListaUsuarios();
                                                    inicializaTablaUsuario(listaUsuarios, listaUsuarios.size());

                                                }
                                           });
                                        } 
                                }
                        };                           
                        return cell;
                }	
        });

   } 
   public void inicializaAccionesFiltros(){
       flUsuario.setOnKeyReleased(new EventHandler<KeyEvent>() {
      @Override
       public void handle(KeyEvent e) {
         filtro(flUsuario.getText(),flNombre.getText(), 0);
       }
      });
       flNombre.setOnKeyReleased(new EventHandler<KeyEvent>() {
      @Override
       public void handle(KeyEvent e) {
               filtro(flUsuario.getText(),flNombre.getText(), 0);

       }
      });    
   }
   public void filtro(String usuario, String nombre,int row){
        ObservableList<SegUsuario> listFiltros = FXCollections.observableArrayList();
         List<SegUsuario> lista =  new SegUsuarioDAO().findByPropertyFilter(usuario,nombre, row);
            for(SegUsuario item:lista){
                listFiltros.add(item);
            }           
        listaUsuarios = listFiltros;
        inicializaTablaUsuario(listaUsuarios, listaUsuarios.size());   }
   
   public void desactivarUsuario(SegUsuario usuario){
       new CrearEditarUsuariosService().actualizaUsuario(usuario);        
   }

   
   public void nuevoUsuario(ActionEvent event) throws FlowException {
       creaEditaUsuario(null,event);
    }
    public void setListaUsuarios(ObservableList<SegUsuario> listaUsuarios) {
        this.listaUsuarios = listaUsuarios;
    }
    public ObservableList<SegUsuario> getListaUsuarios() {
        return listaUsuarios;
    }
    public void creaEditaUsuario(SegUsuario usuario, ActionEvent ev) throws FlowException{
       
       String titulo=usuario!=null?"Editar Usuario":"Nuevo Usuario";
       Stage s = new Stage(); 
        try {
            
            FXMLLoader loader= new FXMLLoader(getClass().getResource(Pantallas.FXML_CREAR_EDITAR_USUARIOS));          
            CrearEditarUsuariosController controller= new CrearEditarUsuariosController();
            controller.setUsuario(usuario);
            controller.setAdministrarUsuarios(this);
            loader.setController(controller);
            AnchorPane root = (AnchorPane) loader.load();             
            Scene scene = new Scene(root);
            s.setTitle(titulo);                  
            s.setScene(scene);        
            s.initModality(Modality.WINDOW_MODAL);
            s.initStyle(StageStyle.UTILITY);
            s.setResizable(false);
            s.initOwner(((Node)ev.getSource()).getScene().getWindow());            
            s.showAndWait();        
         } catch (IOException e) {
            throw new IllegalStateException("cannot load FXML login screen", e);
        } finally {
            
        }
             
       
   }
  
   
   
   
}
