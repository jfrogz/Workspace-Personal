package mx.vw.swf.security.controller;

import io.datafx.controller.ViewController;
import io.datafx.controller.flow.FlowException;
import io.datafx.controller.flow.context.ActionHandler;
import io.datafx.controller.flow.context.FXMLViewFlowContext;
import io.datafx.controller.flow.context.FlowActionHandler;
import io.datafx.controller.flow.context.ViewFlowContext;
import io.datafx.controller.util.VetoException;
import java.net.URL;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import javafx.animation.FadeTransition;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.*;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;

import javax.annotation.PostConstruct;

import javafx.util.Duration;
import mx.com.vw.swf.exception.SWFLoginException;
import mx.vw.swf.security.service.LoginService;

import javax.naming.NamingException;

import mx.vw.swf.cdi.DataFXLauncher;
import mx.vw.swf.security.dao.SegUsuarioDAO;
import mx.vw.swf.security.model.SegUsuario;
import mx.vw.swf.sms.utilerias.DefaultValidatorResultListener;
import mx.vw.swf.sms.utilerias.LengthValidator;
import mx.vw.swf.sms.utilerias.Utilerias;
import org.controlsfx.dialog.Dialogs;
import org.controlsfx.validation.*;

/**
 * Created by dzm152z on 08/01/2015.
 */
//@FXMLController("/fxml/security/Login.fxml")
@ViewController("/fxml/security/Login.fxml")
public class LoginController extends MenuController {

    @FXML
    private TextField txtUsuario;
    @FXML
    private PasswordField txtPassword;

    @FXML
    private Label lblUsuario;
    @FXML
    private Label lblPassword;

    @FXML
    private Button btnInicioUsuario;
    @FXML
    private Button btnLimpiar;

    @ActionHandler
    FlowActionHandler actionHandler;

    LoginService loginService = new LoginService();

    @FXMLViewFlowContext
    ViewFlowContext viewFlowContext;

    @PostConstruct
    public void postConstruct() {
        super.postConstruct();
        welcomeMenuBar.setVisible(false);
        imgAyuda.setVisible(false);
        linkManualUsuario.setVisible(false);
        labelIdentificadorUsuario.setVisible(false);
        labelMovimientoActual.setText(DataFXLauncher.getProperty("Login.Header"));
        lblUsuario.setText(DataFXLauncher.getProperty("Login.UsrLabel") + ":");
        lblPassword.setText(DataFXLauncher.getProperty("Login.PwdLabel") + ":");
        btnInicioUsuario.setText(DataFXLauncher.getProperty("General.btnAceptar"));
        btnLimpiar.setText(DataFXLauncher.getProperty("General.btnLimpiar"));

        txtUsuario.setOnKeyPressed((event) -> {
            if (event.getCode() == KeyCode.ENTER) {
                txtPassword.requestFocus();
            }
            if (event.getCode() == KeyCode.ESCAPE) {
                txtPassword.clear();
            txtUsuario.clear();
            }
        }
        );
        txtPassword.setOnKeyPressed((event) -> {
            if (event.getCode() == KeyCode.ENTER) {
                login(event);
            }
            if (event.getCode() == KeyCode.TAB) {
                btnInicioUsuario.requestFocus();
            }
            if (event.getCode() == KeyCode.ESCAPE) {
                txtPassword.clear();
            txtUsuario.clear();
            }
        }
        );
        
        btnInicioUsuario.setOnKeyPressed((event)->{
            if (event.getCode() == KeyCode.ENTER) {
                login(event);
            }
            if (event.getCode() == KeyCode.ESCAPE) {
                txtPassword.clear();
            txtUsuario.clear();
            }
        });
        btnLimpiar.setOnAction((ActionEvent) -> {
            txtPassword.clear();
            txtUsuario.clear();
        });

        inicialilzarValidaciones();
        sobreEscribirSalir();
        initialize();
        
    }

    public void initialize() {
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                txtUsuario.requestFocus();
            }
        });
    }
    
    private void sobreEscribirSalir ()
    {
        labelSalida.setText(DataFXLauncher.getProperty("General.Exit"));
        labelSalida.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                Utilerias.cerrar(event);
            }
        });
        
        imagenSalida.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                Utilerias.cerrar(event);
            }
        });
    }

    private void inicialilzarValidaciones() {
        txtUsuario.getProperties().put("fieldName", DataFXLauncher.getProperty("Login.UsrLabel"));
        txtPassword.getProperties().put("fieldName", DataFXLauncher.getProperty("Login.PwdLabel"));

        //registerValidator(txtUsuario, Validator.combine(Validator.createEmptyValidator("El usuario no puede ser vac√≠o"), new LengthValidator(1,10)));
        registerValidator(txtUsuario, Validator.combine(
                Validator.createEmptyValidator(
                        String.format(DataFXLauncher.getProperty("Validations.CampoVacio"),
                                txtUsuario.getProperties().get("fieldName"))), 
                new LengthValidator(1, 20)));

        registerValidator(txtPassword, Validator.createEmptyValidator(
                String.format(DataFXLauncher.getProperty("Validations.CampoVacio"),
                        txtPassword.getProperties().get("fieldName"))));
        
        
       txtUsuario.addEventFilter(KeyEvent.KEY_TYPED, Utilerias.permiteLetrasNumeros(20));
       txtPassword.addEventFilter(KeyEvent.KEY_TYPED, Utilerias.permiteLetrasNumeros(20));
    }

    @Deprecated
    private boolean validations() {
        boolean bandera = true;
        SegUsuario segUsuario = null;
        String username = txtUsuario.getText().trim();
        String password = txtPassword.getText().trim();

        // <editor-fold defaultstate="collapsed" desc="Comprobar Campos vacios">
        if (username.isEmpty()) {
            lblUsuario.setTextFill(Color.RED);
            bandera &= false;
        } else {
            lblUsuario.setTextFill(Color.BLACK);
        }

        if (password.isEmpty()) {
            lblPassword.setTextFill(Color.RED);
            bandera &= false;
        } else {
            lblPassword.setTextFill(Color.BLACK);
        }
        // </editor-fold>

        //<editor-fold defaultstate="collapsed" desc="Se lanzan avisos">
        if (!bandera) {
            Dialogs.create()
                    .owner(DataFXLauncher.primary)
                    .title(DataFXLauncher.getProperty("Sistema.Nombre"))
                    .masthead(DataFXLauncher.getProperty("Login.Valid.IncompleteData.Header"))
                    .message(DataFXLauncher.getProperty("Login.Valid.IncompleteData.Message"))
                    .showWarning();
            return bandera;
        }
        //</editor-fold>

        //<editor-fold defaultstate="collapsed" desc="Comprobar Usuario en base del sistema">
        if (bandera) {

            SegUsuarioDAO sudao = new SegUsuarioDAO();

            List<SegUsuario> findByUserId = sudao.findByUserId(username);
            if (!findByUserId.isEmpty()) {
                segUsuario = findByUserId.get(0);
            } else {
                Dialogs.create()
                        .owner(DataFXLauncher.primary)
                        .title(DataFXLauncher.getProperty("Sistema.Nombre"))
                        .masthead(DataFXLauncher.getProperty("Login.Valid.NoAccess.Header"))
                        .message(DataFXLauncher.getProperty("Login.Valid.NoAccess.Message"))
                        .showError();
                bandera = false;
            }
        }
        //</editor-fold>

        //<editor-fold defaultstate="collapsed" desc="Comprobar Usuario base de datos ActiveDirectory">
        if (bandera & segUsuario != null) {
            boolean success = false;
            try {//ActiveDirectory
                loginService.tryLogin(username, password);
                if (!success) {
                    Dialogs.create()
                            .owner(DataFXLauncher.primary)
                            .title(DataFXLauncher.getProperty("Sistema.Nombre"))
                            .masthead(DataFXLauncher.getProperty("Login.Valid.Credentials.Header"))
                            .message(DataFXLauncher.getProperty("Login.Valid.Credentials.Message"))
                            .showError();
                }
            } catch (NamingException ex) {
                //Logger.getLogger(LoginController.class.getName()).log(Level.SEVERE, null, ex);
                if (!success) {
                    Dialogs.create()
                            .owner(DataFXLauncher.primary)
                            .title(DataFXLauncher.getProperty("Sistema.Nombre"))
                            .masthead(DataFXLauncher.getProperty("Login.Valid.Credentials.Header"))
                            .message(DataFXLauncher.getProperty("Login.Valid.Credentials.Message"))
                            .showWarning();
                }
                bandera = success;
            } catch (SWFLoginException ex) {
                // Logger.getLogger(LoginController.class.getName()).log(Level.SEVERE, null, ex);
                if (!success) {
                    Dialogs.create()
                            .owner(DataFXLauncher.primary)
                            .title(DataFXLauncher.getProperty("Sistema.Nombre"))
                            .masthead(DataFXLauncher.getProperty("Login.Valid.ActiveDir.Header"))
                            .message(DataFXLauncher.getProperty("Login.Valid.ActiveDir.Message"))
                            .showError();
                }
                bandera = success;
            }
            viewFlowContext.register("USERPRINCIPAL", segUsuario);
            //super.usuario = segUsuario;
        }
        //</editor-fold>

        //es necesario podker mandar el usuario por parametros al headerTemplate.fxml para usar su nombre y poder obtener permisos
        return bandera;
    }

    public void login(Event event) {
        if (displayValidationResult(false)) {
            try {
                String username = txtUsuario.getText();
                String password = txtPassword.getText();
                SegUsuario segUsuario = loginService.tryLogin(username, password);
                viewFlowContext.register("USERPRINCIPAL", segUsuario);
                actionHandler.navigate(WelcomeController.class);
            } catch (VetoException | FlowException ex) {
                Logger.getLogger(LoginController.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SWFLoginException | NamingException e) {
                //e.printStackTrace();
                displayErrorMessage(e.getMessage());
            }
        }
    }
}
