/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.vw.swf.security.controller;

import io.datafx.controller.ViewController;
import io.datafx.controller.flow.FlowException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.util.Callback;
import javax.annotation.PostConstruct;
import mx.vw.swf.security.model.SegUsuario;
import mx.vw.swf.security.dao.SegUsuarioDAO;
import javafx.scene.control.Pagination;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.stage.StageStyle;
import mx.vw.swf.cdi.DataFXLauncher;
import mx.vw.swf.security.service.CrearEditarUsuariosService;
import mx.vw.swf.sms.utilerias.Pantallas;
import mx.vw.swf.sms.utilerias.Utilerias;




/**
 * FXML Controller class
 *
 * @author fox1x0d
 */
@ViewController("/fxml/security/AdministrarUsuarios.fxml")
public class AdministrarUsuariosController extends MenuController{
   
    @FXML   private TableView<SegUsuario>      tablaUsuarios;  
    @FXML   private TableColumn<SegUsuario,String>  colUsuario,colNombre,colCorreoElectronico, colEstatus;
    @FXML   private TableColumn<SegUsuario,Long> colId; 
    @FXML   private TableColumn<SegUsuario,Boolean> colAcciones; 
    @FXML   private BorderPane borderUsuarios;
    @FXML   private TextField flUsuario,flNombre;
            private ObservableList<SegUsuario> listaUsuarios;
            private Pagination pagination;
            private FilteredList<SegUsuario> filteredData;
            private SortedList<SegUsuario> sortedData;
           
 

  
    @PostConstruct
    public void postConstruct() {        
        super.postConstruct();      
        inicializaColumnasTabla();
        inicializaUsuarios();
        inicializaAccionesFiltros();

          
                
    }
    public void inicializaUsuarios(){
        setListaUsuarios(FXCollections.observableArrayList(obtieneListaUsuarios()));
        filteredData = new FilteredList<>(getListaUsuarios(), p -> true);
        sortedData= new SortedList<>(filteredData); 
        sortedData.comparatorProperty().bind(tablaUsuarios.comparatorProperty());
        inicializaTablaUsuario(sortedData);
        
    }
    public void inicializaTablaUsuario(SortedList<SegUsuario> lista){
        if(lista.size()>0){
          int renglonesMostrar=5;
          pagination = Utilerias.creaPaginacionTableView(renglonesMostrar, lista, tablaUsuarios); 
          borderUsuarios.setCenter(null);
          borderUsuarios.setCenter(pagination);
          inicializacolumnaAccion();
        }
        else{
            tablaUsuarios.getItems().clear();
        }
    }
    public void inicializaColumnasTabla(){
        
         colId.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_id"));         
         colUsuario.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_usuario"));      
         colNombre.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_nombre"));
         colCorreoElectronico.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_correo"));
         colEstatus.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_estatus"));
         colAcciones.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_acciones"));
         
         colId.setCellValueFactory(new PropertyValueFactory<>("id"));
         colUsuario.setCellValueFactory(new PropertyValueFactory<>("userId"));
         colNombre.setCellValueFactory(new PropertyValueFactory<>("nombreCompleto"));
         colCorreoElectronico.setCellValueFactory(new PropertyValueFactory<>("correoE"));
         colEstatus.setCellValueFactory(new PropertyValueFactory<>("etiquetaEstatus"));
     
         
    }
    public ObservableList<SegUsuario> obtieneListaUsuarios(){
            List<SegUsuario> lista = new SegUsuarioDAO().findAll();
            ObservableList<SegUsuario> listaol = FXCollections.observableArrayList();
            for(SegUsuario item:lista){
                listaol.add(item);
            }
            return listaol;
    }
   
    public void inicializacolumnaAccion(){       
          colAcciones.setSortable(false);
          colAcciones.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<SegUsuario, Boolean>, ObservableValue<Boolean>>(){                   
                     public ObservableValue<Boolean> call(TableColumn.CellDataFeatures<SegUsuario, Boolean> p) {                                                                                             
                        return new SimpleBooleanProperty(p.getValue() != null);                       
                     }                   
          });

         colAcciones.setCellFactory(new Callback<TableColumn<SegUsuario,Boolean>,TableCell<SegUsuario,Boolean>>(){        
                 @Override
                 public TableCell<SegUsuario,Boolean> call(TableColumn<SegUsuario,Boolean> param) {                
                         TableCell<SegUsuario,Boolean> cell = new TableCell<SegUsuario,Boolean>(){
                                
                                @Override
                                 public void updateItem(Boolean item, boolean empty) {
                                     
                                         if(item!=null){
                                           

                                            Button editar = new Button("Editar"); 
                                            Button desactivar = new Button("Desactivar"); 
                                            Button perfiles = new Button("Perfiles");
                                            HBox botones= new HBox(editar,desactivar,perfiles);
                                            botones.setSpacing(10);
                                            setGraphic(botones);
                                            editar.setOnAction(new EventHandler<ActionEvent>() {
                                                 @Override
                                                 public void handle(ActionEvent t) {
                                                    
                                                    
                                                 int selectdIndex = getTableRow().getIndex();
                                                 SegUsuario usuario=(SegUsuario) tablaUsuarios.getItems().get(selectdIndex);

                                                         creaEditaUsuario(usuario,t);
                                                    

                                                 }
                                            });
                                            desactivar.setOnAction(new EventHandler<ActionEvent>() {
                                                 @Override
                                                 public void handle(ActionEvent t) {
                                                     Short desactiva=0;
                                                     int selectdIndex = getTableRow().getIndex();
                                                     SegUsuario usuario=(SegUsuario) tablaUsuarios.getItems().get(selectdIndex);
                                                     usuario.setEstatus(desactiva);
                                                     desactivarUsuario(usuario);
                                                     inicializaUsuarios();

                                                 }
                                            });
                                         }
                                         else{
                                             setGraphic(null);

                                         }
                                 }
                         };                           
                         return cell;
                 }	
         });

    } 
    public void inicializaAccionesFiltros(){
       flUsuario.textProperty().addListener((observable, oldValue, newValue) -> {
         filteredData.setPredicate(usuer -> {
             if (newValue == null || newValue.isEmpty()) {
                 return true;
             }
             String lowerCaseFilter = newValue.toLowerCase();

             if (usuer.getUserId().toLowerCase().indexOf(lowerCaseFilter) != -1) {
                 return true; 
             } 
                 return false; 
             });
              inicializaTablaUsuario(sortedData);
       });
     flNombre.textProperty().addListener((observable, oldValue, newValue) -> {
         filteredData.setPredicate(usuer -> {
             if (newValue == null || newValue.isEmpty()) {
                 return true;
             }
             String lowerCaseFilter = newValue.toLowerCase();

             if (usuer.getNombreCompleto().toLowerCase().indexOf(lowerCaseFilter) != -1) {
                 return true; 
             } 
                 return false; 
             });
              inicializaTablaUsuario(sortedData);
         });
    }
    public void desactivarUsuario(SegUsuario usuario){
       new CrearEditarUsuariosService().actualizaUsuario(usuario);        
    }

   
    public void nuevoUsuario(ActionEvent event) throws FlowException {
       creaEditaUsuario(null,event);
    }
    public void setListaUsuarios(ObservableList<SegUsuario> listaUsuarios) {
        this.listaUsuarios = listaUsuarios;
    }
    public ObservableList<SegUsuario> getListaUsuarios() {
        return listaUsuarios;
    }
    public void creaEditaUsuario(SegUsuario usuario, ActionEvent ev) {
        String titulo=usuario!=null?"Editar Usuario":"Nuevo Usuario";
        Stage stage;
       
        try {
            CrearEditarUsuariosController controller= new CrearEditarUsuariosController();
            controller.setUsuario(usuario);
            controller.setAdministrarUsuarios(this);
            stage = Utilerias.nuevaVentana(Pantallas.FXML_CREAR_EDITAR_USUARIOS, controller, titulo);
            stage.initModality(Modality.WINDOW_MODAL);
            stage.initStyle(StageStyle.UTILITY);
            stage.setResizable(false);
            stage.initOwner(((Node)ev.getSource()).getScene().getWindow());
            stage.showAndWait();   
        } catch (IOException ex) {
            Logger.getLogger(AdministrarUsuariosController.class.getName()).log(Level.SEVERE, null, ex);
        }
             
       
   }
  
   
   
   
}
