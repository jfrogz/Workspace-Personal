/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.vw.swf.security.controller;

import io.datafx.controller.ViewController;
import io.datafx.controller.flow.FlowException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.util.Callback;
import javax.annotation.PostConstruct;
import mx.vw.swf.security.model.SegUsuario;
import mx.vw.swf.security.dao.SegUsuarioDAO;
<<<<<<< .mine
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
=======
>>>>>>> .r3608
import javafx.scene.control.Label;
import javafx.scene.control.Pagination;
import javafx.scene.control.TextField;
<<<<<<< .mine
import javafx.scene.layout.AnchorPane;
=======
>>>>>>> .r3608
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.stage.StageStyle;
import mx.vw.swf.cdi.DataFXLauncher;
import mx.vw.swf.security.service.CrearEditarUsuariosService;
import mx.vw.swf.sms.utilerias.Pantallas;
import mx.vw.swf.sms.utilerias.Utilerias;

/**
 * FXML Controller class
 *
 * @author fox1x0d
 */
@ViewController("/fxml/security/AdministrarUsuarios.fxml")
<<<<<<< .mine
public class AdministrarUsuariosController extends MenuController {
=======
public class AdministrarUsuariosController extends MenuController{
   
    @FXML   private TableView<SegUsuario>      tablaUsuarios;  
    @FXML   private TableColumn<SegUsuario,String>  colUsuario,colNombre,colCorreoElectronico, colEstatus;
    @FXML   private TableColumn<SegUsuario,Long> colId; 
    @FXML   private TableColumn<SegUsuario,Boolean> colAcciones; 
    @FXML   private BorderPane borderUsuarios;
    @FXML   private TextField flUsuario,flNombre;
>>>>>>> .r3608
<<<<<<< .mine

    @FXML
    private TableView<SegUsuario> tablaUsuarios;
    @FXML
    private TableColumn<SegUsuario, String> colUsuario, colNombre, colCorreoElectronico, colEstatus;
    @FXML
    private TableColumn<SegUsuario, Long> colId;
    @FXML
    private TableColumn<SegUsuario, Boolean> colAcciones;
    @FXML
    private BorderPane anchorUsuarios;
    @FXML
    private TextField flUsuario, flNombre;
    private ObservableList<SegUsuario> listaUsuarios;
    private Pagination pagination;
    FilteredList<SegUsuario> filteredData;
    SortedList<SegUsuario> sortedData;
=======
            private ObservableList<SegUsuario> listaUsuarios;
            private Pagination pagination;
            private FilteredList<SegUsuario> filteredData;
            private SortedList<SegUsuario> sortedData;
           
 
>>>>>>> .r3608

    @PostConstruct
    public void postConstruct() {
        super.postConstruct();
        inicializaColumnasTabla();
        inicializaUsuarios();
        inicializaAccionesFiltros();
<<<<<<< .mine

=======

          
                
    }
    public void inicializaUsuarios(){
        setListaUsuarios(FXCollections.observableArrayList(obtieneListaUsuarios()));
        filteredData = new FilteredList<>(getListaUsuarios(), p -> true);
        sortedData= new SortedList<>(filteredData); 
        sortedData.comparatorProperty().bind(tablaUsuarios.comparatorProperty());
        inicializaTablaUsuario(sortedData);
        
    }
    public void inicializaTablaUsuario(SortedList<SegUsuario> lista){
        if(lista.size()>0){
          int renglonesMostrar=5;
          pagination = Utilerias.creaPaginacionTableView(renglonesMostrar, lista, tablaUsuarios); 
          borderUsuarios.setCenter(null);
          borderUsuarios.setCenter(pagination);
          inicializacolumnaAccion();
        }
        else{
            tablaUsuarios.getItems().clear();
        }
>>>>>>> .r3608
    }
<<<<<<< .mine

    public void inicializaUsuarios() {
        setListaUsuarios(FXCollections.observableArrayList(obtieneListaUsuarios()));
        filteredData = new FilteredList<>(getListaUsuarios(), p -> true);
        sortedData = new SortedList<>(filteredData);
        sortedData.comparatorProperty().bind(tablaUsuarios.comparatorProperty());
        inicializaTablaUsuario(sortedData);

=======
    public void inicializaColumnasTabla(){
        
         colId.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_id"));         
         colUsuario.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_usuario"));      
         colNombre.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_nombre"));
         colCorreoElectronico.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_correo"));
         colEstatus.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_estatus"));
         colAcciones.setText(DataFXLauncher.mensajesPropertiesSeg.getProperty("admin_acciones"));
         
         colId.setCellValueFactory(new PropertyValueFactory<>("id"));
         colUsuario.setCellValueFactory(new PropertyValueFactory<>("userId"));
         colNombre.setCellValueFactory(new PropertyValueFactory<>("nombreCompleto"));
         colCorreoElectronico.setCellValueFactory(new PropertyValueFactory<>("correoE"));
         colEstatus.setCellValueFactory(new PropertyValueFactory<>("etiquetaEstatus"));
     
         
>>>>>>> .r3608
    }

    public void inicializaTablaUsuario(SortedList<SegUsuario> lista) {
        if (lista.size() > 0) {
            int renglonesMostrar = 5;
            int tablasPorPagina = 1;
            pagination = Utilerias.creaPaginacionTableView(tablasPorPagina, renglonesMostrar, lista, tablaUsuarios);
            anchorUsuarios.setCenter(null);
            anchorUsuarios.setCenter(pagination);
            inicializacolumnaAccion();
            //inicializaAccionesFiltros();
        } else {
            tablaUsuarios.getItems().clear();
        }
    }

    public void inicializaColumnasTabla() {

        colId.setText("ID");
        colUsuario.setText("USER");
        colNombre.setText("nombre");
        colCorreoElectronico.setText("correo");
        colEstatus.setText("estatus");
        colAcciones.setText("acciones");

        colId.setCellValueFactory(new PropertyValueFactory<>("id"));
        colUsuario.setCellValueFactory(new PropertyValueFactory<>("userId"));
        colNombre.setCellValueFactory(new PropertyValueFactory<>("nombreCompleto"));
        colCorreoElectronico.setCellValueFactory(new PropertyValueFactory<>("correoE"));
        colEstatus.setCellValueFactory(new PropertyValueFactory<>("etiquetaEstatus"));

    }
<<<<<<< .mine
=======
   
    public void inicializacolumnaAccion(){       
          colAcciones.setSortable(false);
          colAcciones.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<SegUsuario, Boolean>, ObservableValue<Boolean>>(){                   
                     public ObservableValue<Boolean> call(TableColumn.CellDataFeatures<SegUsuario, Boolean> p) {                                                                                             
                        return new SimpleBooleanProperty(p.getValue() != null);                       
                     }                   
          });

         colAcciones.setCellFactory(new Callback<TableColumn<SegUsuario,Boolean>,TableCell<SegUsuario,Boolean>>(){        
                 @Override
                 public TableCell<SegUsuario,Boolean> call(TableColumn<SegUsuario,Boolean> param) {                
                         TableCell<SegUsuario,Boolean> cell = new TableCell<SegUsuario,Boolean>(){
                                
                                @Override
                                 public void updateItem(Boolean item, boolean empty) {
                                     
                                         if(item!=null){
                                           
>>>>>>> .r3608

<<<<<<< .mine
    public ObservableList<SegUsuario> obtieneListaUsuarios() {
        List<SegUsuario> lista = new SegUsuarioDAO().findAll();
        ObservableList<SegUsuario> listaol = FXCollections.observableArrayList();
        for (SegUsuario item : lista) {
            listaol.add(item);
        }
        return listaol;
    }
=======
                                            Button editar = new Button("Editar"); 
                                            Button desactivar = new Button("Desactivar"); 
                                            Button perfiles = new Button("Perfiles");
                                            HBox botones= new HBox(editar,desactivar,perfiles);
                                            botones.setSpacing(10);
                                            setGraphic(botones);
                                            editar.setOnAction(new EventHandler<ActionEvent>() {
                                                 @Override
                                                 public void handle(ActionEvent t) {
                                                    
                                                    
                                                 int selectdIndex = getTableRow().getIndex();
                                                 SegUsuario usuario=(SegUsuario) tablaUsuarios.getItems().get(selectdIndex);
>>>>>>> .r3608

<<<<<<< .mine
    public void inicializacolumnaAccion() {
        colAcciones.setSortable(false);
        colAcciones.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<SegUsuario, Boolean>, ObservableValue<Boolean>>() {
            public ObservableValue<Boolean> call(TableColumn.CellDataFeatures<SegUsuario, Boolean> p) {
                return new SimpleBooleanProperty(p.getValue() != null);
            }
        });

        colAcciones.setCellFactory(new Callback<TableColumn<SegUsuario, Boolean>, TableCell<SegUsuario, Boolean>>() {
            @Override
            public TableCell<SegUsuario, Boolean> call(TableColumn<SegUsuario, Boolean> param) {
                TableCell<SegUsuario, Boolean> cell = new TableCell<SegUsuario, Boolean>() {
                    @Override
                    public void updateItem(Boolean item, boolean empty) {
                        if (item != null) {

                            Button editar = new Button("Editar");
                            Button desactivar = new Button("Desactivar");
                            Button perfiles = new Button("Perfiles");
                            editar.setStyle("botones");
                            HBox botones = new HBox(editar, desactivar, perfiles);
                            botones.setSpacing(10);
                            setGraphic(botones);
                            editar.setOnAction(new EventHandler<ActionEvent>() {
                                @Override
                                public void handle(ActionEvent t) {
                                    int selectdIndex = getTableRow().getIndex();
                                    SegUsuario usuario = (SegUsuario) tablaUsuarios.getItems().get(selectdIndex);

                                    try {
                                        creaEditaUsuario(usuario, t);
                                    } catch (FlowException ex) {
                                        Logger.getLogger(AdministrarUsuariosController.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                }
                            });
                            desactivar.setOnAction(new EventHandler<ActionEvent>() {
                                @Override
                                public void handle(ActionEvent t) {
                                    int selectdIndex = getTableRow().getIndex();
                                    Short desactiva = 0;
                                    SegUsuario usuario = (SegUsuario) tablaUsuarios.getItems().get(selectdIndex);
                                    usuario.setEstatus(desactiva);
                                    desactivarUsuario(usuario);
                                    inicializaUsuarios();

                                }
                            });
                        }
                    }
                };
                return cell;
            }
        });
=======
                                                         creaEditaUsuario(usuario,t);
                                                    
>>>>>>> .r3608

<<<<<<< .mine
    }
=======
                                                 }
                                            });
                                            desactivar.setOnAction(new EventHandler<ActionEvent>() {
                                                 @Override
                                                 public void handle(ActionEvent t) {
                                                     Short desactiva=0;
                                                     int selectdIndex = getTableRow().getIndex();
                                                     SegUsuario usuario=(SegUsuario) tablaUsuarios.getItems().get(selectdIndex);
                                                     usuario.setEstatus(desactiva);
                                                     desactivarUsuario(usuario);
                                                     inicializaUsuarios();
>>>>>>> .r3608

<<<<<<< .mine
    public void inicializaAccionesFiltros() {
        flUsuario.textProperty().addListener((observable, oldValue, newValue) -> {
            filteredData.setPredicate(usuer -> {
                if (newValue == null || newValue.isEmpty()) {
                    return true;
                }
                String lowerCaseFilter = newValue.toLowerCase();
=======
                                                 }
                                            });
                                         }
                                         else{
                                             setGraphic(null);

                                         }
                                 }
                         };                           
                         return cell;
                 }	
         });

    } 
    public void inicializaAccionesFiltros(){
       flUsuario.textProperty().addListener((observable, oldValue, newValue) -> {
         filteredData.setPredicate(usuer -> {
             if (newValue == null || newValue.isEmpty()) {
                 return true;
             }
             String lowerCaseFilter = newValue.toLowerCase();

             if (usuer.getUserId().toLowerCase().indexOf(lowerCaseFilter) != -1) {
                 return true; 
             } 
                 return false; 
             });
              inicializaTablaUsuario(sortedData);
       });
     flNombre.textProperty().addListener((observable, oldValue, newValue) -> {
         filteredData.setPredicate(usuer -> {
             if (newValue == null || newValue.isEmpty()) {
                 return true;
             }
             String lowerCaseFilter = newValue.toLowerCase();

             if (usuer.getNombreCompleto().toLowerCase().indexOf(lowerCaseFilter) != -1) {
                 return true; 
             } 
                 return false; 
             });
              inicializaTablaUsuario(sortedData);
         });
    }
    public void desactivarUsuario(SegUsuario usuario){
       new CrearEditarUsuariosService().actualizaUsuario(usuario);        
    }
>>>>>>> .r3608

<<<<<<< .mine
                if (usuer.getUserId().toLowerCase().indexOf(lowerCaseFilter) != -1) {
                    return true;
                }
                return false;
            });
            inicializaTablaUsuario(sortedData);
        });
        flNombre.textProperty().addListener((observable, oldValue, newValue) -> {
            filteredData.setPredicate(usuer -> {
                if (newValue == null || newValue.isEmpty()) {
                    return true;
                }
                String lowerCaseFilter = newValue.toLowerCase();

                if (usuer.getNombreCompleto().toLowerCase().indexOf(lowerCaseFilter) != -1) {
                    return true;
                }
                return false;
            });
            inicializaTablaUsuario(sortedData);
        });
=======
   
    public void nuevoUsuario(ActionEvent event) throws FlowException {
       creaEditaUsuario(null,event);
>>>>>>> .r3608
    }

    public void desactivarUsuario(SegUsuario usuario) {
        new CrearEditarUsuariosService().actualizaUsuario(usuario);
    }

    public void nuevoUsuario(ActionEvent event) throws FlowException {
        creaEditaUsuario(null, event);
    }

    public void setListaUsuarios(ObservableList<SegUsuario> listaUsuarios) {
        this.listaUsuarios = listaUsuarios;
    }

    public ObservableList<SegUsuario> getListaUsuarios() {
        return listaUsuarios;
    }
<<<<<<< .mine

    public void creaEditaUsuario(SegUsuario usuario, ActionEvent ev) throws FlowException {

        String titulo = usuario != null ? "Editar Usuario" : "Nuevo Usuario";
        Stage s = new Stage();
=======
    public void creaEditaUsuario(SegUsuario usuario, ActionEvent ev) {
        String titulo=usuario!=null?"Editar Usuario":"Nuevo Usuario";
        Stage stage;
       
>>>>>>> .r3608
        try {
<<<<<<< .mine

            FXMLLoader loader = new FXMLLoader(getClass().getResource(Pantallas.FXML_CREAR_EDITAR_USUARIOS));
            CrearEditarUsuariosController controller = new CrearEditarUsuariosController();
=======
            CrearEditarUsuariosController controller= new CrearEditarUsuariosController();
>>>>>>> .r3608
            controller.setUsuario(usuario);
            controller.setAdministrarUsuarios(this);
<<<<<<< .mine
            loader.setController(controller);
            AnchorPane root = (AnchorPane) loader.load();
            Scene scene = new Scene(root);
            s.setTitle(titulo);
            s.setScene(scene);
            s.initModality(Modality.WINDOW_MODAL);
            s.initStyle(StageStyle.UTILITY);
            s.setResizable(false);
            s.initOwner(((Node) ev.getSource()).getScene().getWindow());
            s.showAndWait();
        } catch (IOException e) {
            throw new IllegalStateException("cannot load FXML login screen", e);
        } finally {

=======
            stage = Utilerias.nuevaVentana(Pantallas.FXML_CREAR_EDITAR_USUARIOS, controller, titulo);
            stage.initModality(Modality.WINDOW_MODAL);
            stage.initStyle(StageStyle.UTILITY);
            stage.setResizable(false);
            stage.initOwner(((Node)ev.getSource()).getScene().getWindow());
            stage.showAndWait();   
        } catch (IOException ex) {
            Logger.getLogger(AdministrarUsuariosController.class.getName()).log(Level.SEVERE, null, ex);
>>>>>>> .r3608
        }

    }

}
